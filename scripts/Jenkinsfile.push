pipeline {
    agent {
        label 'windows && dotnet'
    }
    options {
        timestamps()
    }
    stages {
        stage('clean') {
            steps {
                checkout scm
                bat 'git clean -dfx'
            }
        }
        stage('build') {
            steps {               
                bat 'dotnet build LinearLight2.sln -c Release'
            }
        }
        stage ('test') {
            steps {
                bat 'dotnet test LinearLight2Test/LinearLight2Test.csproj -c Release --logger:trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'               
                step([$class: 'MSTestPublisher', testResultsFile:"LinearLight2Test/TestResults/*.trx", failOnError: true, keepLongStdio: true])
                cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'LinearLight2Test\\coverage.cobertura.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false, methodCoverageTargets: '80.0, 0.0, 0.0', lineCoverageTargets: '80.0, 0.0, 0.0', conditionalCoverageTargets: '70.0, 0.0, 0.0'
            }
        }
        stage('pack') {
            steps {
                bat 'dotnet pack LinearLight2/LinearLight2.csproj --configuration Release --include-source --version-suffix SNAPSHOT-%GERRIT_CHANGE_NUMBER%-%GERRIT_PATCHSET_NUMBER%'
                bat 'dotnet nuget push LinearLight2\\bin\\Release\\LinearLight2*SNAPSHOT*symbols.nupkg --source NetSnapshots'
            }
        }
        stage('analyse') {
            steps {
                bat 'D:/ProgFiles/CommandLineTools/inspectcode.exe -o=code_inspection.xml -p=D:/ProgFiles/TaLe.DotSettings LinearLight2.sln'
                warnings canComputeNew: false, canResolveRelativePaths: false, parserConfigurations: [[parserName: 'Resharper InspectCode', pattern: 'code_inspection.xml']], failedTotalNormal: "0"
            }
        }
    }
}
